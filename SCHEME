; SCHEME CODE FOR CSC-151                                                                                Grinnell College, IA - Spring Semester, 2024

; Freestyle 1
#lang racket
(require csc151)

;;; freestyle.rkt
;;;   MP1 Second Redo - Freestyle Exercise
;;;   CSC-151-01 2024Sp.
;;;
;;; Author: Sophia Ramalli
;;; Date submitted: 2024-03-09
;;;
;;; Acknowledgements: Sam

(define head
  (lambda (size-head color)
    (solid-circle size-head color)))

(define head-of-the-juggler
  (head 100 "pink"))

(define body
  (lambda (color)
    (solid-rectangle 25 65 color)))

(define body-of-the-juggler
  (body "brown"))

(define legs-and-feet
  (lambda (color)
    (solid-rectangle 86 25 color)))

(define legs-and-feet-juggler
  (legs-and-feet "black"))

(define ball
  (lambda (color)
    (solid-ellipse 40 30 color)))

(define ball-juggler
  (ball "red"))

(define floor
  (lambda (color)
    (solid-ellipse 100 20 color)))

(define floor-juggler
  (floor "yellow"))

(define my-image
  (above head-of-the-juggler
         body-of-the-juggler
         legs-and-feet-juggler
         ball-juggler
         floor-juggler))

(define generate-my-image-helper
  (lambda  (size-head c1 c2 c3 c4 c5)
    (above (head size-head c1)
           (body c2)
           (legs-and-feet c3)
           (ball c4)
           (floor c5))))

(define generate-my-image
  (lambda (size-head head-color ball-color)
    (generate-my-image-helper size-head head-color "brown" "black" ball-color "yellow")))
   
(define my-image-alt (generate-my-image 100 "pink" "red"))

(define my-other-image (generate-my-image 150 "green" "pink"))

;;; Explanation of goals: Let the user choose the head size, as well as its color and the color of the ball of
;;; juggler. The purpose of the other-image was to show a juggler after many acts (even changed the ball he
;;; performing with) feeling nauseous (represented by the "green" head).

; Freestyle 2

;;; (mirror outer-radius inner-radius color) -> image?
;;;   outer-radius : real?
;;;   inner-radius : real?
;;;   color : color?
;;; Returns an image of mirror with outer-radius, inner-radius and color.


(define mirror
  (lambda (outer-radius inner-radius color)
    (solid-polygon (list (pt (real-part
                              (make-polar inner-radius (* 1/5 pi)))
                             (imag-part (make-polar outer-radius (* 1/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 2/5 pi)))
                             (imag-part (make-polar outer-radius (* 2/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 3/5 pi)))
                             (imag-part (make-polar outer-radius (* 3/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 4/5 pi)))
                             (imag-part (make-polar outer-radius (* 4/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 5/5 pi)))
                             (imag-part (make-polar outer-radius (* 5/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 6/5 pi)))
                             (imag-part (make-polar outer-radius (* 6/5 pi))))                                                                                                                                                                                                                                                             
                         (pt (real-part
                              (make-polar inner-radius (* 7/5 pi)))
                             (imag-part (make-polar outer-radius (* 7/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 8/5 pi)))
                             (imag-part (make-polar outer-radius (* 8/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 9/5 pi)))
                             (imag-part (make-polar outer-radius (* 9/5 pi))))
                         (pt (real-part
                              (make-polar inner-radius (* 10/5 pi)))
                             (imag-part (make-polar outer-radius (* 10/5 pi))))) color)))

;;; (freestyle-examples ()) -> list-of images?
;;; Returns a list of images of mirror with outer-radius, inner-radius and color.

(define freestyle-examples
  (list (beside (overlay (mirror 50 10 "light blue")
                         (mirror 55 15 "dark blue"))
                (solid-rectangle 20 10 "white")
                (beside (overlay (mirror 40 15 "purple")
                                 (mirror 45 20 "silver"))
                        (solid-rectangle 10 20 "white")
                        (overlay (mirror 50 80 "turquoise")
                                 (mirror 55 85 "black"))))))

; Freestyle 3


;;; (my-rgb-transformation rgb-color) -> rgb?

;;;   rgb-color : rgb?

;;; Verifying if red component is greater or equal to 128.

;;; If so, set it equal to 255, If not, set it to 0.

;;; The opposite goes for green and blue.


(define my-rgb-transformation
  (lambda (rgb-color)
    (rgb [if ( >= (rgb-red rgb-color)  128)
             255
             0]
         [if ( >= (rgb-green rgb-color)  128)
             0
             255]
         [if ( >= (rgb-blue rgb-color)  128)
             0
             255])))


;;; (transform img) -> image?
;;;   img : image?
;;; Applied the my-rgb-transformation procedure to all
;;; pixels, creating a Disco 80s Filter

(define transform
  (lambda (img)
    (pixel-map (cut (my-rgb-transformation <> img)))))

;;; (my-rgb-transformation2 rgb-color) -> rgb?
;;;   rgb-color : rgb?
;;; Verifying if green component is greater or
;;; equal to 128. If so, set it equal to 255.
;;; If not, set it to 0. The opposite goes for red and blue.

(define my-rgb-transformation2
  (lambda (rgb-color)
    (rgb [if ( >= (rgb-red rgb-color)  128)
             0
             255]
         [if ( >= (rgb-green rgb-color)  128)
             255
             0]
         [if ( >= (rgb-blue rgb-color)  128)
             0
             255])))

;;; (transform2 img) -> image?
;;;   img : image?
;;; Applied the my-rgb-transformation2 procedure to all
;;; pixels, creating a Radioactive Filter

     

(define transform2
  (lambda (img)
    (pixel-map (cut (my-rgb-transformation2 <> img)))))


;;; (my-rgb-transformation3 img value) -> image?
;;;   img : image?
;;;   value : rgb-component value
;;;Verifying if blue component is greater or equal to 128.
;;; If so, set it equal to 255, If not, set it to 0.
;;; The opposite goes for red and green.


(define my-rgb-transformation3
  (lambda (rgb-color)
    (rgb [if ( >= (rgb-red rgb-color)  128)
             0
             255]
         [if ( >= (rgb-green rgb-color)  128)
             0
             255]
         [if ( >= (rgb-blue rgb-color)  128)
             255
             0])))


;;; (transform3 img) -> image?
;;;   img : image?
;;; Applied the my-rgb-transformation2 procedure to all
;;; pixels, creating a Coraline (Movie Animation) Filter


(define transform3
  (lambda (img)
    (pixel-map (cut (my-rgb-transformation3 <> img)))))


;;; (hsv-rotate-hue1 rgb-color value) -> image?
;;;   img : image?
;;;   value : angle
;;; Rotate hue by 180 degrees angle from the rgb-color


(define hsv-rotate-hue1
  (lambda (rgb-color angle)
    (hsv (remainder (+ 180 angle (hsv-hue rgb-color)) 180)
         (hsv-saturation rgb-color)
         (hsv-value rgb-color))))


;;; (my-hsv-transformation img value) -> image?
;;;   img : image?
;;;   value : angle
;;; Apply hsv-rotate-hue1 for all the pixels 


(define my-hsv-transformation
  (lambda (img)
    (pixel-map (cut (hsv-rotate-hue1 <> img)))))


;;; (hsv-rotate-hue2 rgb-color value) -> image?
;;;   img : image?
;;;   value : angle
;;; Rotate hue by 90 degrees angle from the rgb-color


(define hsv-rotate-hue2
  (lambda (rgb-color angle)
    (hsv (remainder (+ 90 angle (hsv-hue rgb-color)) 90)
         (hsv-saturation rgb-color)
         (hsv-value rgb-color))))


;;; (my-hsv-transformation img value) -> image?
;;;   img : image?
;;;   value : angle
;;; Apply hsv-rotate-hue2 for all the pixels 


(define my-hsv-transformation2
  (lambda (img)
    (pixel-map (cut (hsv-rotate-hue2 <> img)))))


;;; (hsv-rotate-hue3 rgb-color value) -> image?
;;;   img : image?
;;;   value : angle
;;; Rotate hue by 280 degrees angle from the rgb-color


(define hsv-rotate-hue3
  (lambda (rgb-color angle)
    (hsv (remainder (+ 280 angle (hsv-hue rgb-color)) 280)
         (hsv-saturation rgb-color)
         (hsv-value rgb-color))))


;;; (my-hsv-transformation3 img value) -> image?
;;;   img : image?
;;;   value : angle
;;; Apply hsv-rotate-hue3 for all the pixels 


(define my-hsv-transformation3
  (lambda (img)
    (pixel-map (cut (hsv-rotate-hue3 <> img)))))


; Freestyle 4


; Using these procedures and any others you write,
; create an interesting image which you should call freestyle.

;;; (freestyle-structure images) -> image?

;;;   images : (list-of image?)

;;;  Procedure that creates a funky centipede!


(define freestyle-helper
  (lambda (images)
    (if (list? images)
        (rotate
         (stack-then-sequence-then-stack images) 30)
        images)))


(define freestyle-structure
  (lambda (images)
    (sequence (map freestyle-helper images))))


(define freestyle-acessories1
  (lambda (color)
    (overlay/align "left" "top"
                   (solid-circle 50 color)
                   (freestyle-structure (map shape->ellipse
                                             (color-variants-0
                                              (solid-rectangle 100 100 (rgb 200 20 128))))))))


(define freestyle-acessories2
  (lambda (color color2)
    (overlay/align "right" "bottom"
                   (outlined-diamond 50 40 color2 5)
                   (freestyle-acessories1 color))))


(define freestyle-acessories3
  (lambda (color color2 color3)
    (overlay/align "center" "top" (beside
                                   (outlined-circle 10 color3 2)
                                   (outlined-circle 10 color3 2)
                                   (outlined-circle 10 color3 2)
                                   (outlined-circle 10 color3 2))
                   (freestyle-acessories2 color color2))))


(define freestyle-acessories4
  (lambda (color color2 color3)

    (overlay/align "right" "top" (rotate (beside
                                          (outlined-circle 10 "dark red" 5)
                                          (outlined-circle 10 "dark red" 5)) 150)
                   (freestyle-acessories3 color color2 color3))))


(define freestyle-acessories5
  (lambda (color color2 color3)
    (overlay/align "left" "top" (solid-square 10 "purple")
                   (freestyle-acessories4 color color2 color3))))


(define freestyle
  (lambda (color color2 color3)
    (rotate (freestyle-acessories5 color color2 color3) 30)))



; Freestyle 5


;;; (variants-alt digits) ->  (list-of image?)
;;;      digits : (list-of digit?)
;;; Make a list of variants of `img` using the policies implemented.

(define variants-alt
  (lambda (digits)
    (cond
      [(0 <= (car digits) <= 4)
       (rotate (if (0 < (cdr digits) < 2)
                   90
                   null)
               (if (3 < (cdr digits) < 6)
                   180
                   null)
               (if (7 < (cdr digits) < 9)
                   270
                   null))]
      [(5 <= (car digits) <= 7)
       (cons (car digits) (map (digit->shift (variants-alt (cdr digits)))))]
      [(8 <= (car digits) <= 9)
       (cons (car digits) (map (digit->size (variants-alt map (cdr digits)))))])))

;;; (image-transformation-with-digits-1 img digits) ->  (list-of image?)
;;;        img : image?
;;;        digits : (list-of digit?)
;;; Make image transformations recursing over 'image-transformation-with-digits-1'
;;; and 'image-transformation-with-digits-2'.

(define image-transformation-with-digits-1
  (lambda (img digits)
    (cond
      [(null? digits)
       null]
      [(or (= (car digits) 0) (= (car digits) 1) (= (car digits) 2))
       (if (at-least-n-elements digits 1)
           (cons (pixel-map (o rgb-lighter rgb-redder) img)
                 (image-transformation-with-digits-1 img (cdr digits)))
           null)]
      [(= (car digits) 3)
       (if (at-least-n-elements digits 1)
           (cons (pixel-map (o rgb-greener rgb-redder) img)
                 (image-transformation-with-digits-2 img (cdr digits)))
           null)]
      [(= (car digits) 4)
       (cons (vflip img) (image-transformation-with-digits-1 img (cdr digits)))]
      [(= (car digits) 5)
       (if (at-least-n-elements digits 1)
           (cons (rotate img (variants-alt digits))
                 (image-transformation-with-digits-1 img (cdr digits)))
           null)]
      [(= (car digits) 6)
       (if (at-least-n-elements digits 2)
           (cons (hshift img (digit->shift (cadr digits)))
                 (image-transformation-with-digits-1 img (cddr digits)))
           null)]
      [(= (car digits) 7)
       (if (at-least-n-elements digits 2)
           (cons (vshift img (digit->shift (cadr digits)))
                 (image-transformation-with-digits-1 img (cddr digits)))
           null)]
      [(= (car digits) 8)
       (if (at-least-n-elements digits 2)
           (cons (scale img (digit->scale-factor (cadr digits)))
                 (image-transformation-with-digits-1 img (cddr digits)))
           null)]
      [else
       (if (at-least-n-elements digits 2)
           (cons (pixel-map (o rgb-greener rgb-redder) img)
                 (image-transformation-with-digits-1 img (cdr digits)))
           null)])))

;;; (image-transformation-with-digits-2 img digits) ->  (list-of image?)
;;;        img : image?
;;;        digits : (list-of digit?)
;;; Make image transformations recursing over 'image-transformation-with-digits-1'
;;; and 'image-transformation-with-digits-2'.

(define image-transformation-with-digits-2
  (lambda (img digits)
    (cond
      [(null? digits)
       null]
      [(or (= (car digits) 0) (= (car digits) 1) (= (car digits) 2)
           (= (car digits) 3) (= (car digits) 4) (= (car digits) 5))
       (if (at-least-n-elements digits 1)
           (cons (pixel-map (o rgb-greener rgb-redder) img)
                 (image-transformation-with-digits-2 img (cdr digits)))
           null)]
      [else
       (if (at-least-n-elements digits 2)
           (cons (rotate img (variants-alt digits))
                 (image-transformation-with-digits-2 img (cddr digits)))
           null)])))

; a. Shifting perspectives

;;; (shifting-perspectives img str) -> image?
;;;   img : image?
;;;   str : string?
;;; Make a new image by combining variants of `img` in various ways,
;;; using `str` to help guide the combination.

(define shifting-perspectives
  (lambda (img str)
    (cond
      [(= (string-length str) 0)
       img]
      [(> (string-length str) 5)
       (apply beside (image-transformation-with-digits-1 img (string->digits str)))]
      [else
       (apply above (image-transformation-with-digits-2 img (string->digits str)))])))

; Freestyle 6


;;; (my-fractal-1/helper size color n) -> image?
;;;   size : positive-real?
;;;   color : rgb?
;;;   n : non-negative integer
;;; Create an image by calling primary colored square
;;; carpet-a, centered colored square for solid-square
;;; and sequencing then stacking the geometric figures.

(define my-fractal-1/helper
  (lambda (size color n)
    (if (<= n 0)
        (solid-square size color)
        (let* ([primary-colored-square
                (carpet-a (/ size 2)
                          color (rgb 0 0 0) (- n 1))]
               [center-colored-square (solid-square
                                       size (rgb 0 0 0))])
          [let [(row (beside (solid-ellipse 50 40 color)
                             primary-colored-square
                             primary-colored-square))]
            (above row
                   (beside primary-colored-square
                           center-colored-square
                           primary-colored-square)
                   row)]))))

;;; (my-fractal size color n) -> image?
;;;   size : positive-real?
;;;   color : rgb?
;;;   n : non-negative integer
;;; Create an image based on the helper procedure.

(define my-fractal
  (lambda (side color n)
    (if (<= n 0)
        (solid-square side color)
        (let [(square (solid-square side color))]
          (overlay (my-fractal-1/helper side color n)
                   square)))))

#|

I created `fractal-01.png` using 
    (image-save (my-fractal 40 (rgb 255 0 0) 3))
                "fractal-01.png")

I created `fractal-02.png` using 
    (image-save (my-fractal 100 (rgb 255 0 255) 3))
                "fractal-02.png")


I created `fractal-03.png` using 
    (image-save (my-fractal 70 (rgb 255 255 128) 3))
                "fractal-03.png")

Explanation


Define primary-colored-square as carpet-a
and center-colored-square as a geometric figure

Create a row by placing an ellipse with the
primary-colored-square

Then stack rows

For my fractal = overlay the helper procedure
with a square if n is not zero


|#

; Freestyle 7


;;; (alt-positionally-transform-pixel color col row) -> rgb?
;;;   color : rgb?
;;;   col : nonnegative-integer?
;;;   row : nonnegative-integer?
;;; Transform `color` based on its column and row.

(define alt-positionally-transform-pixel
  (lambda (color col row)
    (rgb (+ (rgb-red color)
            (remainder (round (sqrt (+ (sqr (- col 100)) (sqr (- row 50)))))
                       64))
         (+ (rgb-green color)
            (* 2 (remainder (round (sqrt (+ (sqr (- col 150)) (sqr (- row 200)))))
                            32)))            
         (+ (rgb-blue color)
            (* 3 (remainder (round (sqrt (+ (sqr (- col 50)) (sqr (- row 50)))))
                            25)))
         (rgb-alpha color))))

;;; (positionally-transform-pixels! pixels width height) -> void?
;;;   pixels : (all-of (vector-of rgb?) (has-length (* width height)))
;;;   width : positive-integer? (represents the width of the image)
;;;   height : positive-integer? (represents the height of the image)
;;; Takes a vector of pixels representing a width-by-height image as a
;;; parameter and modifies each pixel by using `alt-positionally-transform-pixel`

(define alt-positionally-transform-pixels!/helper
  (lambda (pixels width height pos column row)
    (cond
      [(>= row height)
       (void)]
      [(>= column width)
       (alt-positionally-transform-pixels!/helper pixels width height pos 0 (+ row 1))]
      [else
       (vector-set! pixels pos (alt-positionally-transform-pixel (vector-ref pixels pos) column row))
       (alt-positionally-transform-pixels!/helper pixels width height (+ pos 1) (+ column 1) row)])))

(define alt-positionally-transform-pixels!
  (lambda (pixels width height)
    (alt-positionally-transform-pixels!/helper pixels width height 0 0 0)))

;;; (alt-positionally-transform img) -> image?
;;;   img : image?
;;; Transform an image by using the `alt-positionally-transform-pixels!` procedure

(define alt-positionally-transform
  (lambda (img)
    (let ([pixels (image->pixels img)])
      (alt-positionally-transform-pixels! pixels 50 60)
      (pixels->image pixels (image-width img) (image-height img) "ex"))))


#|

Description of goals:

Simulate the screen of a broken TV

Instructions:

Put these commands in the interactions panel

(alt-positionally-transform (solid-square 55 "gray"))
(alt-positionally-transform (solid-square 60 "gray"))
(alt-positionally-transform (solid-square 80 "gray"))

|#

; Freestyle 8

#lang racket
(require csc151)

;;; word-cloud.rkt
;;;   A word cloud Ultimate Redo, created for MP8 in
;;;   CSC-151 2024Sp
;;;
;;; Author: Sophia Ramalli
;;; Date submitted: 2024-05-13
;;;
;;; Acknowledgements: Sarah (Individual Tutor)
;;; 
;;; * Starter code provided by SamR and Leah.  
;;; * Hash Tables Provided Code

#|
Your assignment is to write a procedure, (word-cloud filename), that builds
a word cloud for the given file.
That is, it takes a filename (a string) as input, reads all the words
from the file and computes their frequences (hint: hash tables),
generates an appropriate-sized word image for each of the top 50, and
puts them together into a single image.

We strongly recommend that you decompose the problem into smaller pieces.
(You are required to do so to earn an M.)

Note that the (file->words filename) procedure (in the CSC-151 library) will give
you a list of all the words in a file (as strings).

You must build a hash table with words as keys and frequencies as values.
You can refer to the hash table lab for how to do so.

You can earn an M if you use a straightforward algorithm to put them together into
a single image, such as stacking the words on top of each other. (No, that’s not much
                                                                    of a “cloud”.)
To earn an E, you will need to develop a more sophisticated algorithm.

Save your code in the file word-cloud.rkt. Also include a file, sample.png, that shows
a particularly successful cloud you generated. Your word cloud should be from a plain
text file of at least 1,000 words. You should include the file in your submission. Make
sure to include a comment in word-cloud.rkt that explains how you generated that cloud
(e.g., the source text).
|#

;;; (common-form str) -> string?
;;;   str : string?
;;; Convert `str` to a common form for use as, say, a key in
;;; a hash table.
;;;   If provided with a non-string, just returns the value.
(define common-form
  (lambda (str)
    (if (string? str)
        (string-downcase (list->string (filter (lambda (ch)
                                                 (or (char-numeric? ch)
                                                     (char-alphabetic? ch)))
                                               (string->list str))))
        str)))

;;; (new-make-hash pairs) -> hash?
;;;   pairs : list-of pair?
;;; Create a hash table that uses the common
;;; form of the keys in pairs.
(define new-make-hash
  (lambda (pairs)
    (make-hash (map (lambda (pair)
                      (cons (common-form (car pair))
                            (cdr pair)))
                    pairs))))

;;; (new-hash-set! hash key value) -> void?
;;;   hash : hash?
;;;   key : any?
;;;   value : any?
;;; Sets a value in a hash using the common
;;; form of string keys.
(define new-hash-set!
  (lambda (hash key value)
    (hash-set! hash (common-form key) value)))

;;; (new-hash-ref! hash key) -> any?
;;;   hash : hash?
;;;   key : any?
;;; Look up a value using the common form of key.
(define new-hash-ref
  (lambda (hash key)
    (hash-ref hash (common-form key))))

;;; (new-hash-has-key? hash key) -> boolean?
;;;   hash : hash
;;;   key : any?
;;; Determine if hash has the common form of key.
(define new-hash-has-key?
  (lambda (hash key)
    (hash-has-key? hash (common-form key))))

;;; (counting-value hash word) -> void?
;;;   hash : hash
;;;   word : string?
;;; Counts how many times a word appears
;;; in a hash table

(define counting-value
  (lambda (hash word)
    (if (new-hash-has-key? hash word)
        (new-hash-set! hash word (+ 1 (new-hash-ref hash word)))
        (new-hash-set! hash word 1))))

;;; (file->hash file) -> hash?
;;;   file: any?
;;; Coverts a file to a hash table

(define file->hash
  (lambda (file)
    (let ([hash (new-make-hash '())])
      (map (cut (counting-value hash <>)) (file->words file))
      hash)))

;;; (create-list hash str) -> list?
;;;   hash: hash?
;;;   str: string?
;;; Creates a list with a hash and
;;; a string

(define create-list
  (lambda (hash str)
    (list str (hash-ref hash str))))

;;; (compare-lists entry1 entry2) -> void?
;;;   entry1 : list?
;;;   entry2 : list?
;;; Compares if second element of the first list
;;; is larger or equal to the second element in
;;; the second list

(define compare-lists
  (lambda (entry1 entry2)
    (>= (cadr entry1) (cadr entry2))))

;;; (hash-sort hash) -> void?
;;;   hash: hash?
;;; Compares two frequencies from the hash
;;; table and sorts from largest to smallest

(define hash-sort
  (lambda (hash)
    (sort (map (cut (create-list hash <>))
               (hash-keys hash))
          compare-lists)))

;;; (take-50 hash) -> list?
;;;   hash: hash?
;;; Takes the top 50 frequencies from the hash
;;; table and make a new list

(define take-50
  (lambda (hash n)
    (if (>= n 50)
        null
        (cons (car hash) (take-50 (cdr hash) (+ n 1))))))

;;; (string-to-image str size color) -> img?
;;;   str: string?
;;;   size: integer?
;;;    color: rgb?
;;; Creates an image with a text

(define string-to-image
  (lambda (str size color)
    (text str size color)))

;;; (colors ()) -> list?
;;; Creates a list with 7 different rgb colors

(define colors
  (list (rgb 0 255 0) (rgb 128 255 0) (rgb 40 30 120) (rgb 33 88 70)
        (rgb 0 200 100) (rgb 20 100 0) (rgb 30 20 10)))

;;; (word-cloud/helper lst) -> img?
;;;   lst : list?
;;; Creates an image by converting the list of strings
;;; to a text and scaling the size of the words
;;; based on the number of times they appeared in the
;;; file, as well as using the different colors provided

(define word-cloud/helper
  (lambda (lst)
    (if (null? lst)
        null
        (cons (string-to-image (caar lst)
                               (floor (* 0.05 (cadar lst)))
                               (list-ref colors (remainder (cadar lst) 7)))
              (word-cloud/helper (cdr lst))))))


;;; (common-list ()) -> list?
;;; Creates a list with the most common english words

(define common-list
  (list "the" "to" "of" "a" "and" "i" "in" "was" "that" "not" "she" "her"
        "it" "you" "he" "his" "be" "as" "had" "with"
        "for" "but" "is" "have" "at" "him" "on" "my" "by"
        "all" "they" "so" "which" "were" "been" "could" "from" "no"
        "this" "very"))

;;; (remove-common hash lst) -> hash?
;;;   hash: hash?
;;;   lst : list?
;;; Creates a new hash table with removes
;;; the words from the 'common-list'
(define remove-common
  (lambda (hash lst)
    (cond
      [(null? lst)
       hash]
      [else
       (hash-remove! hash (car lst))
       (remove-common hash (cdr lst))])))

;;; (stack-helper images) -> image?
;;;   images : (list-of image?)
;;; Procedure that places images on top of each other.

(define stack-helper
  (lambda (images)
    (apply above images)))

;;; (stack images) -> image?
;;;   images : (list-of image?)
;;; Procedure that takes a list of images
;;; as a parameter and returns a single
;;; image in which each image in the list
;;; is placed above the subsequent images.

(define stack
  (lambda (images)
    (if (= (length images) 1)
        (list-ref images 0)
        (stack-helper images))))

;;; (sequence-helper images) -> image?
;;;   images : (list-of image?)
;;; Procedure that places images beside each other.

(define sequence-helper
  (lambda (images)
    (apply beside images)))

;;; (sequence images) -> image?
;;;   images : (list-of image?)
;;; Procedure that takes a list of images
;;; as a parameter and returns a single
;;; image in which each image in the list
;;; is placed next to the subsequent images.

(define sequence
  (lambda (images)
    (if (= (length images) 1)
        (list-ref images 0)
       (sequence-helper images))))


;;; (stack-then-sequence-helper images) -> image?
;;;   images : (list-of image?)
;;;  Procedure that checks if shapes is a list.
;;; If so, it applies the stack (place above
;;; each other) procedure. If not, it returns shapes.

(define stack-then-sequence-helper
  (lambda (shapes)
    (if (list? shapes)
        (stack shapes)
        shapes)))

;;; (stack-then-sequence images) -> image?
;;;   images : (list-of image?)
;;;  Procedure that takes a slightly nested list of images
;;; as a parameter and returns an image in which
;;;each sublist is stacked and then the stacks are placed next to each other.

(define stack-then-sequence
  (lambda (images)
    (sequence (map stack-then-sequence-helper images))))

;;; (split-list lst) -> list?
;;;   lst : list?
;;; Grabs the first 10 elements of a list,
;;; then applies the same procedure to the
;;; new list that does not include these
;;; first 10 elements

(define split-list
  (lambda (lst)
    (if (< (length lst) 10)
        lst
        (cons (take lst 10) (split-list (drop lst 10))))))

;;; (word-cloud file) -> img?
;;;   file : any?
;;; Creates a word-cloud with a file provided

(define word-cloud
  (lambda (file)
    (stack-then-sequence (split-list (word-cloud/helper (take-50
                                                         (hash-sort
                                                          (remove-common
                                                           (file->hash "word-cloud-file.txt")
                                                           common-list)) 0))))))


                        
